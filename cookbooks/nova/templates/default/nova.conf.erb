# nova.conf generated by Chef
[DEFAULT]

verbose=<%= node[:nova][:verbose] %>
debug=<%= node[:nova][:debug] %>

# Paths
state_path=<%= node[:nova][:state_path] %>
lock_path=<%= node[:nova][:lock_path] %>

auth_strategy=<%= node[:nova][:auth_strategy] %>

log_config=<%= node[:nova][:log_config] %>

allow_resize_to_same_host=<%= node[:nova][:allow_resize_to_same_host] %>
compute_scheduler_driver=<%= node[:nova][:compute_scheduler_driver] %>
dhcpbridge_flagfile=<%= node[:nova][:dhcpbridge_flagfile] %>
dhcpbridge=<%= node[:nova][:dhcpbridge] %>
fixed_range=<%= node[:nova][:fixed_range] %>
#s3_host=
#s3_port=
network_manager=<%= node[:nova][:network_manager] %>
network_host=<%= node[:nova][:network_host] %>

volume_group=<%= node[:nova][:volume_group] %>
volume_name_template=<%= node[:nova][:volume_name_template] %>
#iscsi_helper=tgtadm"

root_helper=<%= node[:nova][:root_helper] %>

osapi_compute_extension=<%= node[:nova][:osapi_compute_extension] %>
my_ip=<%= node[:nova][:my_ip] %>
public_interface=<%= node[:nova][:public_interface] %>
vlan_interface=<%= node[:nova][:vlan_interface] %>
#flat_network_bridge=$FLAT_NETWORK_BRIDGE
flat_interface=<%= node[:nova][:flat_interface] %>
flat_network_bridge=<%= node[:nova][:flat_network_bridge] %>


sql_connection=<%= @sql_connection %>

libvirt_type=<%= node[:nova][:libvirt_type] %>
instance_name_template=<%= node[:nova][:instance_name_template] %>

api_paste_config=<%= node[:nova][:api_paste_config] %>
image_service=<%= node[:nova][:image_service] %>
ec2_dmz_host=<%= node[:nova][:ec2_dmz_host]  %>
ec2_host=<%= node[:nova][:ec2_host] %>

rabbit_host=<%= @rabbit_settings[:address] %>
rabbit_port=<%= @rabbit_settings[:port] %>
rabbit_userid=<%= @rabbit_settings[:user] %>
rabbit_password=<%= @rabbit_settings[:password] %>
rabbit_virtual_host=<%= @rabbit_settings[:vhost] %>

glance_api_servers=<%= node[:nova][:glance_api_servers] %>

force_dhcp_release=<%= node[:nova][:force_dhcp_release] %>
connection_type=<%= node[:nova][:connection_type] %>
firewall_driver=<%= node[:nova][:firewall_driver] %>

ec2_listen_port=<%= node[:nova][:ec2_listen_port] %>
osapi_compute_listen_port=<%= node[:nova][:osapi_compute_listen_port] %>
metadata_listen_port=<%= node[:nova][:metadata_listen_port] %>
osapi_volume_listen_port=<%= node[:nova][:osapi_volume_listen_port] %>

# Node that if true nova-network needs to be insatlled on nova-compute node
multi_host=<%= node[:nova][:multi_host] %>

# Needed on compute nodes to get metadata (pub key for ubuntu)
metadata_host=<%= node[:nova][:metadata_host] %>
dmz_cidr=<%= node[:nova][:dmz_cidr] %>

